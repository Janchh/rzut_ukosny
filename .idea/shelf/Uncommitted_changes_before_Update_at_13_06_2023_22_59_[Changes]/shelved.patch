Index: src/main/java/rzut/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rzut;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Window;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n\r\npublic class Controller extends MainFrame{\r\n\r\n    @FXML\r\n    TextField vPocz;\r\n    @FXML\r\n    TextField mass;\r\n    @FXML\r\n    TextField grav;\r\n    @FXML\r\n    TextField res;\r\n    @FXML\r\n    TextField vwind;\r\n    @FXML\r\n    TextField dwind;\r\n    @FXML\r\n    TextField dthrow;\r\n    @FXML\r\n    TextField tim;\r\n    @FXML\r\n    TextField radi;\r\n    @FXML\r\n    TextField deg;\r\n    @FXML\r\n    Button button1; //zapisanie trajektorii\r\n    @FXML\r\n    Button button2; //zmiana języka\r\n    @FXML\r\n    Button otraj; //obliczanie trajektorii\r\n    @FXML\r\n    Label lb1;\r\n    @FXML\r\n    Label lb2;\r\n    @FXML\r\n    Label lb3;\r\n    @FXML\r\n    Label lb4;\r\n    @FXML\r\n    Label lb5;\r\n    @FXML\r\n    Label lb6;\r\n    @FXML\r\n    Label lb7;\r\n    @FXML\r\n    Label lb8;\r\n    @FXML\r\n    Label lb9;\r\n    @FXML\r\n    Label lb10;\r\n    @FXML\r\n    Label lb11;\r\n    @FXML\r\n    Label lb12;\r\n    @FXML\r\n    Canvas can1;\r\n    boolean lang = false;\r\n    private Window stage;\r\n    FileChooser fileChooser = new FileChooser();\r\n\r\n    ArrayList<Double> x = new ArrayList<Double>();\r\n    ArrayList<Double> y = new ArrayList<Double>();\r\n    ArrayList<Double> z = new ArrayList<Double>();\r\n    ArrayList<Double> t = new ArrayList<Double>();\r\n    double maxx = 0;\r\n    double maxy = 0;\r\n    double maxz = 0;\r\n\r\n    public void plEn(ActionEvent e){\r\n        if(lang){\r\n            //zmiana na j. polski\r\n            pol();\r\n            lang = false;\r\n        } else{\r\n            //zmiana na j. angielski\r\n            eng();\r\n            lang = true;\r\n        }\r\n\r\n    }\r\n    public void start(ActionEvent e){\r\n        wczytaj();\r\n        drawShapes();\r\n    }\r\n    public void help(ActionEvent e){\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        if (lang == false){\r\n        alert.setTitle(\"Pomoc\");\r\n        alert.setHeaderText(\"Zaawansowany Symulator Rzutu Ukośnego GitHit200promax\\nby Jan Chruśliński & Michał Ratajczyk @2023\");\r\n        alert.setContentText(\"Ten program pozwala symulować ruch ukośny. \\n\\n\" +\r\n                                \"Aby użyć programu, wykonaj następujące kroki: \\n\" +\r\n                                \"1. Wprowadź prędkość początkową, masę i inne parametry w menu po prawej stronie.\\n\" +\r\n                                \"2. Kliknij przycisk 'START/STOP', aby wystrzelić lub zatrzymać pocisk.\\n\" +\r\n                                \"3. Użyj przycisku 'Zapisz trajektorię', aby zapisać trajektorię do pliku csv.\\n\" +\r\n                                \"4. Dostosuj perspektywę za pomocą przycisków 'X', 'Y', 'Z', '3D'.\\n\" +\r\n                                \"Aby uzyskać dodatkową pomoc, zapoznaj się z dokumentacją programu lub skontaktuj się z twórcami.\");\r\n        alert.showAndWait().ifPresent(rs -> {\r\n            if (rs == ButtonType.OK) {\r\n                System.out.println(\"Pressed OK.\");\r\n            }\r\n        });}\r\n        else{\r\n        alert.setTitle(\"Help\");\r\n        alert.setHeaderText(\"GitHit2000promax Advanced Trajectory Simulator\\nby Ian Chruślińsky & Michael Ratajchyk @2023\");\r\n        alert.setContentText(\"This program allows you to simulate projectile motion.\\n\\n\" +\r\n                \"To use the program, follow these steps:\\n\" +\r\n                \"1. Enter the initial velocity, mass, and other parameters in the menu on the right.\\n\" +\r\n                \"2. Click the 'START/STOP' button to launch or stop the projectile.\\n\" +\r\n                \"3. Use the 'Save trajectory' button to save the trajectory to a csv file.\\n\" +\r\n                \"4. Adjust the perspective using the 'X', 'Y', 'Z', '3D' buttons.\\n\\n\" +\r\n                \"For additional assistance, refer to the program's documentation or contact the creators.\");\r\n        alert.showAndWait().ifPresent(rs -> {\r\n            if (rs == ButtonType.OK) {\r\n                System.out.println(\"Pressed OK.\");\r\n            }\r\n        });}\r\n    }\r\n    public void oblicz(ActionEvent e){\r\n        EulerMovementSimulation symulacja = new EulerMovementSimulation();\r\n        symulacja.setV0(Double.parseDouble(vPocz.getText()));\r\n        symulacja.setM(Double.parseDouble(mass.getText()));\r\n        symulacja.setG(Double.parseDouble(grav.getText()));\r\n        symulacja.setoP(Double.parseDouble(res.getText()));\r\n        symulacja.setvW(Double.parseDouble(vwind.getText()));\r\n        symulacja.setkW(Double.parseDouble(dwind.getText()));\r\n        symulacja.setdt(Double.parseDouble(dthrow.getText()));\r\n        symulacja.setT(Double.parseDouble(tim.getText()));\r\n        symulacja.setR(Double.parseDouble(radi.getText()));\r\n        symulacja.setPhi(Double.parseDouble(deg.getText()));\r\n        //symulacja.wypisz();\r\n        try {\r\n            symulacja.simulate();\r\n        } catch (IOException ex) {\r\n            throw new RuntimeException(ex);\r\n        }\r\n    }\r\n    public void save(ActionEvent e){\r\n        if(!lang){\r\n            fileChooser.setTitle(\"Zapisz trajektorię\");\r\n        }else{\r\n            fileChooser.setTitle(\"Save trajectory\");\r\n        }\r\n        fileChooser.getExtensionFilters().addAll(\r\n                new FileChooser.ExtensionFilter(\"CSV Files\", \"*.csv\"));\r\n        File file = fileChooser.showSaveDialog(stage);\r\n\r\n        if (file != null) {\r\n            saveTextToFile(file);\r\n        }\r\n    }\r\n    public void x(ActionEvent e){\r\n        System.out.println(\"x\");\r\n    }\r\n    public void y(ActionEvent e){\r\n        System.out.println(\"y\");\r\n    }\r\n    public void z(ActionEvent e){\r\n        System.out.println(\"z\");\r\n    }\r\n    public void td(ActionEvent e){\r\n        System.out.println(\"td\");\r\n    }\r\n    public void all(ActionEvent e){\r\n        System.out.println(\"all\");\r\n    }\r\n\r\n    public void pol(){\r\n        button1.setText(\"Zapisz trajektorię\");\r\n        button2.setText(\"EN\");\r\n        otraj.setText(\"Oblicz trajektorię\");\r\n        lb1.setText(\"Menu parametrów\");\r\n        lb2.setText(\"Prędkość początkowa\");\r\n        lb3.setText(\"Masa\");\r\n        lb4.setText(\"Przyspieszenie grawitacyjne\");\r\n        lb5.setText(\"Współczynnik oporu powietrza\");\r\n        lb6.setText(\"Prędkość wiatru\");\r\n        lb7.setText(\"Kierunek wiatru\");\r\n        lb8.setText(\"Kierunek rzutu\");\r\n        lb9.setText(\"Okres obrotu planety\");\r\n        lb10.setText(\"Odległość od osi planety\");\r\n        lb11.setText(\"Odchylenie od poziomu\");\r\n        lb12.setText(\"Wybór perspektywy\");\r\n    }\r\n\r\n    public void eng(){\r\n        button1.setText(\"Save trajectory\");\r\n        button2.setText(\"PL\");\r\n        otraj.setText(\"Calculate trajectory\");\r\n        lb1.setText(\"Menu of parameters\");\r\n        lb2.setText(\"Initial speed\");\r\n        lb3.setText(\"Mass\");\r\n        lb4.setText(\"Gravitational acceleration\");\r\n        lb5.setText(\"Drag coefficient\");\r\n        lb6.setText(\"Wind speed\");\r\n        lb7.setText(\"Wind direction\");\r\n        lb8.setText(\"Throw direction\");\r\n        lb9.setText(\"The rotation period of the planet\");\r\n        lb10.setText(\"Distance from the axis of the planet\");\r\n        lb11.setText(\"Deviation from the level\");\r\n        lb12.setText(\"Perspective selection\");\r\n    }\r\n\r\n    private void saveTextToFile(File file) {\r\n        try {\r\n            PrintWriter writer;\r\n            writer = new PrintWriter(file);\r\n            try (BufferedReader br = new BufferedReader(new FileReader(\"output.csv\"))) {\r\n                String line;\r\n                String[] etykietyPl={\r\n                        \"Prędkość początkowa\",\r\n                        \"Masa\",\r\n                        \"Przyspieszenie grawitacyjne\",\r\n                        \"Współczynnik oporu powietrza\",\r\n                        \"Prędkość wiatru\",\r\n                        \"Kierunek wiatru\",\r\n                        \"Kierunek rzutu\",\r\n                        \"Okres obrotu planety\",\r\n                        \"Odległość od osi planety\",\r\n                        \"Odchylenie od poziomu\"};\r\n                String[] etykietyEn={\r\n                        \"Initial speed\",\r\n                        \"Mass\",\r\n                        \"Gravitational acceleration\",\r\n                        \"Drag coefficient\",\r\n                        \"Wind speed\",\r\n                        \"Wind direction\",\r\n                        \"Throw direction\",\r\n                        \"The rotation period of the planet\",\r\n                        \"Distance from the axis of the planet\",\r\n                        \"Deviation from the level\"};\r\n                for(int i = 0; i < 10; i++){\r\n                    line = br.readLine();\r\n                    if(!lang){\r\n                        writer.println(etykietyPl[i]+\": \"+line);\r\n                    }else{\r\n                        writer.println(etykietyEn[i]+\": \"+line);\r\n                    }\r\n                }\r\n                while ((line = br.readLine()) != null) {\r\n                    writer.println(line);\r\n                }\r\n            }\r\n            writer.close();\r\n        } catch (IOException ex) {\r\n            System.out.println(\"błąd zapisu\");\r\n        }\r\n    }\r\n\r\n    public void drawShapes() {\r\n        GraphicsContext gc = can1.getGraphicsContext2D();\r\n        int h = (int) can1.getHeight();\r\n        int w = (int) can1.getWidth();\r\n        gc.setFill(Color.BLUE);\r\n        int l = x.size();\r\n        double resX = w / maxx;\r\n        double resY = h / maxy;\r\n        for (int i = 0; i < l; i++){\r\n            gc.fillOval(resX * x.get(i), resY * y.get(i), 2, 2);\r\n        }\r\n    }\r\n\r\n    public void wczytaj(){\r\n\r\n            try (BufferedReader br = new BufferedReader(new FileReader(\"output.csv\"))) {\r\n                String line;\r\n                for(int i = 0; i < 11; i++){\r\n                    line = br.readLine();\r\n                }\r\n                double tmp;\r\n\r\n                while ((line = br.readLine()) != null) {\r\n                    String[] val = line.split(\",\");\r\n                    tmp = Double.valueOf(val[0]);\r\n                    x.add(tmp);\r\n                    maxx = max(tmp, maxx);\r\n                    tmp = Double.valueOf(val[1]);\r\n                    y.add(tmp);\r\n                    maxy = max(tmp, maxy);\r\n                    tmp = Double.valueOf(val[2]);\r\n                    z.add(tmp);\r\n                    maxz = max(tmp, maxz);\r\n                    tmp = Double.valueOf(val[3]);\r\n                    t.add(tmp);\r\n                }\r\n            }\r\n         catch (IOException ex) {\r\n            System.out.println(\"błąd zapisu\");\r\n        }\r\n    }\r\n\r\n    private double max(double tmp, double maxx) {\r\n        if(tmp > maxx){\r\n            return tmp;\r\n        }\r\n        else{\r\n            return maxx;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/rzut/Controller.java b/src/main/java/rzut/Controller.java
--- a/src/main/java/rzut/Controller.java	(revision d3e8761c3b2d1954ad41ec89004e0be648ece816)
+++ b/src/main/java/rzut/Controller.java	(date 1686689796683)
@@ -172,9 +172,6 @@
     public void z(ActionEvent e){
         System.out.println("z");
     }
-    public void td(ActionEvent e){
-        System.out.println("td");
-    }
     public void all(ActionEvent e){
         System.out.println("all");
     }
